
APDS99602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000402  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800108  00800108  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001114  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000760  00000000  00000000  00001ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000860  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  9e:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 132:	84 e9       	ldi	r24, 0x94	; 148
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	08 95       	ret

0000013a <init_uart>:
#define APDS9960_WRITE 0x72
#define APDS9960_READ 0x73 

void init_uart(uint16_t baudrate){

	uint16_t UBRR_val = (F_CPU/16)/(baudrate-1);
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	9c 01       	movw	r18, r24
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 e4       	ldi	r22, 0x40	; 64
 144:	72 e4       	ldi	r23, 0x42	; 66
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 a8 01 	call	0x350	; 0x350 <__udivmodsi4>

	UBRR0H = UBRR_val >> 8;
 14e:	83 2f       	mov	r24, r19
 150:	99 27       	eor	r25, r25
 152:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRR_val;
 156:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // UART TX (Transmit - senden) einschalten
 15a:	e1 ec       	ldi	r30, 0xC1	; 193
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 69       	ori	r24, 0x98	; 152
 162:	80 83       	st	Z, r24
	UCSR0C |= (1<<USBS0) | (3<<UCSZ00); //Modus Asynchron 8N1 (8 Datenbits, No Parity, 1 Stopbit)
 164:	e2 ec       	ldi	r30, 0xC2	; 194
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8e 60       	ori	r24, 0x0E	; 14
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <uart_putc>:
}

void uart_putc(unsigned char c){

	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
 170:	e0 ec       	ldi	r30, 0xC0	; 192
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	90 81       	ld	r25, Z
 176:	95 ff       	sbrs	r25, 5
 178:	fd cf       	rjmp	.-6      	; 0x174 <uart_putc+0x4>
	UDR0 = c; // output character saved in c
 17a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 17e:	08 95       	ret

00000180 <uart_puts>:
}

void uart_puts(char *s){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
	while(*s){
 186:	88 81       	ld	r24, Y
 188:	88 23       	and	r24, r24
 18a:	31 f0       	breq	.+12     	; 0x198 <uart_puts+0x18>
 18c:	21 96       	adiw	r28, 0x01	; 1
		uart_putc(*s);
 18e:	0e 94 b8 00 	call	0x170	; 0x170 <uart_putc>
	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
	UDR0 = c; // output character saved in c
}

void uart_puts(char *s){
	while(*s){
 192:	89 91       	ld	r24, Y+
 194:	81 11       	cpse	r24, r1
 196:	fb cf       	rjmp	.-10     	; 0x18e <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <init_APDS9960>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	82 e5       	ldi	r24, 0x52	; 82
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <init_APDS9960+0x6>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <init_APDS9960+0x10>
 1ae:	00 00       	nop
int16_t raw_B = 0;
int16_t raw_C = 0;;

void init_APDS9960(void){
	_delay_ms(150);										/* Power up time >100ms */
	i2c_start(APDS9960_WRITE);
 1b0:	82 e7       	ldi	r24, 0x72	; 114
 1b2:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
	i2c_write(0x80); // set pointer to ENABLE REGISTER
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_write(0x03); // write 0x06 to ENABLE REGISTER
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_stop();
 1c2:	0e 94 99 00 	call	0x132	; 0x132 <i2c_stop>

	i2c_start(APDS9960_WRITE);
 1c6:	82 e7       	ldi	r24, 0x72	; 114
 1c8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
	i2c_write(0x81); // set pointer to ALS ADC Integration Time
 1cc:	81 e8       	ldi	r24, 0x81	; 129
 1ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_write(0xDB); // 219 =0XDB = 37 = 103 ms = 37889
 1d2:	8b ed       	ldi	r24, 0xDB	; 219
 1d4:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_stop();
 1d8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_stop>

	i2c_start(APDS9960_WRITE);
 1dc:	82 e7       	ldi	r24, 0x72	; 114
 1de:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
	i2c_write(0x8F); // set pointer to CONTROL<AGAIN>
 1e2:	8f e8       	ldi	r24, 0x8F	; 143
 1e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_write(0x01); // ALS and Color Gain Control = 0 = x1
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_stop();
 1ee:	0e 94 99 00 	call	0x132	; 0x132 <i2c_stop>
 1f2:	08 95       	ret

000001f4 <getreading>:
}

void getreading(void){

	i2c_start(APDS9960_WRITE);
 1f4:	82 e7       	ldi	r24, 0x72	; 114
 1f6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
	i2c_write(0x94); // set pointer to CDATA
 1fa:	84 e9       	ldi	r24, 0x94	; 148
 1fc:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_stop();
 200:	0e 94 99 00 	call	0x132	; 0x132 <i2c_stop>

	i2c_start(APDS9960_READ);
 204:	83 e7       	ldi	r24, 0x73	; 115
 206:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>

	raw_C =  ((uint8_t)i2c_read_ack());
 20a:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	raw_C |= ((uint8_t)i2c_read_ack())<<8;
 218:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 21c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 220:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 224:	38 2b       	or	r19, r24
 226:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 22a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>

	raw_R = ((uint8_t)i2c_read_ack());
 22e:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <raw_R+0x1>
 238:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <raw_R>
	raw_R |= ((uint8_t)i2c_read_ack())<<8;
 23c:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 240:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <raw_R>
 244:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <raw_R+0x1>
 248:	38 2b       	or	r19, r24
 24a:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <raw_R+0x1>
 24e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <raw_R>

	raw_G = ((uint8_t)i2c_read_ack());
 252:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <raw_G+0x1>
 25c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <raw_G>
	raw_G |= ((uint8_t)i2c_read_ack())<<8;
 260:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 264:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <raw_G>
 268:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <raw_G+0x1>
 26c:	38 2b       	or	r19, r24
 26e:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <raw_G+0x1>
 272:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <raw_G>

	raw_B = ((uint8_t)i2c_read_ack());
 276:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <raw_B+0x1>
 280:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <raw_B>
	raw_B |= ((uint8_t)i2c_read_ack())<<8;
 284:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 288:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <raw_B>
 28c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <raw_B+0x1>
 290:	38 2b       	or	r19, r24
 292:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <raw_B+0x1>
 296:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <raw_B>

	i2c_stop();
 29a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_stop>
 29e:	08 95       	ret

000002a0 <main>:

}

int main(void){
	
	init_uart(9600);
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	95 e2       	ldi	r25, 0x25	; 37
 2a4:	0e 94 9d 00 	call	0x13a	; 0x13a <init_uart>
	i2c_init();
 2a8:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	init_APDS9960();
 2ac:	0e 94 cf 00 	call	0x19e	; 0x19e <init_APDS9960>
	
	while(1){
		getreading();
 2b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <getreading>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2b4:	4a e0       	ldi	r20, 0x0A	; 10
 2b6:	60 e1       	ldi	r22, 0x10	; 16
 2b8:	71 e0       	ldi	r23, 0x01	; 1
 2ba:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2be:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2c2:	0e 94 ca 01 	call	0x394	; 0x394 <__itoa_ncheck>
		
		itoa(raw_C, buffer, 10);
		uart_puts(buffer);
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
		uart_puts("  ");
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
 2d6:	4a e0       	ldi	r20, 0x0A	; 10
 2d8:	60 e1       	ldi	r22, 0x10	; 16
 2da:	71 e0       	ldi	r23, 0x01	; 1
 2dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <raw_R>
 2e0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <raw_R+0x1>
 2e4:	0e 94 ca 01 	call	0x394	; 0x394 <__itoa_ncheck>
		
		itoa(raw_R, buffer, 10);
		uart_puts(buffer);
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
		uart_puts("  ");
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
 2f8:	4a e0       	ldi	r20, 0x0A	; 10
 2fa:	60 e1       	ldi	r22, 0x10	; 16
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <raw_G>
 302:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <raw_G+0x1>
 306:	0e 94 ca 01 	call	0x394	; 0x394 <__itoa_ncheck>
		
		itoa(raw_G, buffer, 10);
		uart_puts(buffer);
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
		uart_puts("  ");
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
 31a:	4a e0       	ldi	r20, 0x0A	; 10
 31c:	60 e1       	ldi	r22, 0x10	; 16
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <raw_B>
 324:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <raw_B+0x1>
 328:	0e 94 ca 01 	call	0x394	; 0x394 <__itoa_ncheck>
		
		itoa(raw_B, buffer, 10);
		uart_puts(buffer);
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
		uart_puts("  \r\n");
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 c0 00 	call	0x180	; 0x180 <uart_puts>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	83 ed       	ldi	r24, 0xD3	; 211
 340:	90 e3       	ldi	r25, 0x30	; 48
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0xa2>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0xac>
 34c:	00 00       	nop
 34e:	b0 cf       	rjmp	.-160    	; 0x2b0 <main+0x10>

00000350 <__udivmodsi4>:
 350:	a1 e2       	ldi	r26, 0x21	; 33
 352:	1a 2e       	mov	r1, r26
 354:	aa 1b       	sub	r26, r26
 356:	bb 1b       	sub	r27, r27
 358:	fd 01       	movw	r30, r26
 35a:	0d c0       	rjmp	.+26     	; 0x376 <__udivmodsi4_ep>

0000035c <__udivmodsi4_loop>:
 35c:	aa 1f       	adc	r26, r26
 35e:	bb 1f       	adc	r27, r27
 360:	ee 1f       	adc	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	a2 17       	cp	r26, r18
 366:	b3 07       	cpc	r27, r19
 368:	e4 07       	cpc	r30, r20
 36a:	f5 07       	cpc	r31, r21
 36c:	20 f0       	brcs	.+8      	; 0x376 <__udivmodsi4_ep>
 36e:	a2 1b       	sub	r26, r18
 370:	b3 0b       	sbc	r27, r19
 372:	e4 0b       	sbc	r30, r20
 374:	f5 0b       	sbc	r31, r21

00000376 <__udivmodsi4_ep>:
 376:	66 1f       	adc	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	88 1f       	adc	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	1a 94       	dec	r1
 380:	69 f7       	brne	.-38     	; 0x35c <__udivmodsi4_loop>
 382:	60 95       	com	r22
 384:	70 95       	com	r23
 386:	80 95       	com	r24
 388:	90 95       	com	r25
 38a:	9b 01       	movw	r18, r22
 38c:	ac 01       	movw	r20, r24
 38e:	bd 01       	movw	r22, r26
 390:	cf 01       	movw	r24, r30
 392:	08 95       	ret

00000394 <__itoa_ncheck>:
 394:	bb 27       	eor	r27, r27
 396:	4a 30       	cpi	r20, 0x0A	; 10
 398:	31 f4       	brne	.+12     	; 0x3a6 <__itoa_ncheck+0x12>
 39a:	99 23       	and	r25, r25
 39c:	22 f4       	brpl	.+8      	; 0x3a6 <__itoa_ncheck+0x12>
 39e:	bd e2       	ldi	r27, 0x2D	; 45
 3a0:	90 95       	com	r25
 3a2:	81 95       	neg	r24
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__utoa_common>

000003aa <__utoa_ncheck>:
 3aa:	bb 27       	eor	r27, r27

000003ac <__utoa_common>:
 3ac:	fb 01       	movw	r30, r22
 3ae:	55 27       	eor	r21, r21
 3b0:	aa 27       	eor	r26, r26
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	aa 1f       	adc	r26, r26
 3b8:	a4 17       	cp	r26, r20
 3ba:	10 f0       	brcs	.+4      	; 0x3c0 <__utoa_common+0x14>
 3bc:	a4 1b       	sub	r26, r20
 3be:	83 95       	inc	r24
 3c0:	50 51       	subi	r21, 0x10	; 16
 3c2:	b9 f7       	brne	.-18     	; 0x3b2 <__utoa_common+0x6>
 3c4:	a0 5d       	subi	r26, 0xD0	; 208
 3c6:	aa 33       	cpi	r26, 0x3A	; 58
 3c8:	08 f0       	brcs	.+2      	; 0x3cc <__utoa_common+0x20>
 3ca:	a9 5d       	subi	r26, 0xD9	; 217
 3cc:	a1 93       	st	Z+, r26
 3ce:	00 97       	sbiw	r24, 0x00	; 0
 3d0:	79 f7       	brne	.-34     	; 0x3b0 <__utoa_common+0x4>
 3d2:	b1 11       	cpse	r27, r1
 3d4:	b1 93       	st	Z+, r27
 3d6:	11 92       	st	Z+, r1
 3d8:	cb 01       	movw	r24, r22
 3da:	0c 94 ef 01 	jmp	0x3de	; 0x3de <strrev>

000003de <strrev>:
 3de:	dc 01       	movw	r26, r24
 3e0:	fc 01       	movw	r30, r24
 3e2:	67 2f       	mov	r22, r23
 3e4:	71 91       	ld	r23, Z+
 3e6:	77 23       	and	r23, r23
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <strrev+0x4>
 3ea:	32 97       	sbiw	r30, 0x02	; 2
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <strrev+0x18>
 3ee:	7c 91       	ld	r23, X
 3f0:	6d 93       	st	X+, r22
 3f2:	70 83       	st	Z, r23
 3f4:	62 91       	ld	r22, -Z
 3f6:	ae 17       	cp	r26, r30
 3f8:	bf 07       	cpc	r27, r31
 3fa:	c8 f3       	brcs	.-14     	; 0x3ee <strrev+0x10>
 3fc:	08 95       	ret

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
